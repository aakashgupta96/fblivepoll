c
@post.user.token
@post.page_id
n
@post.page_idn
@post.page_id
c
ret
c
ret.parsed_response["picture"]["data"]["url"]
ret.parsed_response["picture"]["data"]
ret.parsed_response["picture"]
ret.parsed_response
ret.parsed_response['data']
ret
c
ret
c
HTTParty.get("https://graph.facebook.com/#{@post.page_id}?fields=picture{url}&access_token=#{@post.user.token}")
HTTParty.get("https://graph.facebook.com/#{@post.page_id}?fields=picture{url},access_token=#{@post.user.token}")
HTTParty.get("https://graph.facebook.com/#{@post.page_id}?fields=picture{url}?access_token=#{@post.user.token}")
ret
c
@post
c
current_user ? current_user.id : nil
request.url
params.to_unsafe_h
params
c
current_user
current_user.id
session
c
session
session[:current_user_id]
c
Post.live.where(user_id: current_user.id)
Post.live
c
driver
c
driver
c
self.id
self
c
e.message.split("message:").last.split(') ').second.split(',').first
e.message.split("message:").last.split(') ').second.split(',')
e.message.split("message:").last.split(') ').second
e.message.split("message:").last.split(') ')
e.message.split("message:").last.split
e.message.split("message:").last
e.message.split("messsage:").last
e.message.split("messsage").last
e.message.split("messsage").second
e.message.to_json
e.message.to_h
e.message
e
c
x.size
x
c
@post.can_start?
@post.status != "scheduled"
@post.status
@post.errors
c
@post.images
n
c
params.require(:post).permit(images_attributes: [:file, :reaction])
params.require(:post).permit(:images_attributes)
params.require(:post).permit("images_attributes")
params.require(:post).permite("images_attributes")
params.require(:post)
params.require(:post).permit(:images_attributes,:title,:caption,:page_id,:duration,:start_time,:audio,:category,:video,:image)
params.require(:post)[:title]
params.require(:post)[:images_attributes]
params.require(:post)[:image_attributes]
params.require(:post)
c
model.class == Image.class
model.class == Image
model.class == "Image"
model.post.id 
model.post
model.class
model
c
@post.images[0].file.url
@post.images[0].file
@post.images
@post = Post.new(params[:post].permit!)
@post.images
@post = Post.new(params[:post].permit(:title,:caption,:page_id,:duration,:start_time,:audio,:category,:video,:image, :images_attributes))
@post = Post.new(params[:post].permit!(:title,:caption,:page_id,:duration,:start_time,:audio,:category,:video,:image, :images_attributes))
params[:post]
params[:post].permit!(:title,:caption,:page_id,:duration,:start_time,:audio,:category,:video,:image, :images_attributes)
@post.permitted?(params[:post])
@post.permitted(params[:post])
@post.images
@post
n
c
params[:post].permit(:title,:caption,:page_id,:duration,:start_time,:audio,:category,:video,:image,:images_attributes)
params[:post].permit(:title,:caption,:page_id,:duration,:start_time,:audio,:category,:video,:image, :images_attributes)
params.permit(:title,:caption,:page_id,:duration,:start_time,:audio,:category,:video,:image, :images_attributes)
params.require(:post).permit(:title,:caption,:page_id,:duration,:start_time,:audio,:category,:video,:image, :images_attributes)
params.require(:post).permit(:title,:caption,:page_id,:duration,:start_time,:audio,:category,:video,:image)
params.require(:post).permit("images_attributes")
params.require(:post).permit(:images_attributes)
params.require(:post)
params
c
request.env["omniauth.auth"].info.email
request.env["omniauth.auth"].info
request.env["omniauth.auth"].email
request.env["omniauth.auth"]
c
headless.displayexit
%x[ps -p #{process_id}]
headless.display
headless.public_methods
headless
c
params
c
request.env["omniauth.error.type"]
request.env["omniauth.error"]
request.env["omniauth.error"].backtrace
request.env["omniauth.error"].cause
request.env["omniauth.error"].code
request.env["omniauth.error"].message
request.env["omniauth.error"].public_methods
request.env["omniauth.error"]
request.env["omniauth"]
request.env["omniauth.auth"]
params["code"]
params
c
request.env['omniauth.error'].class
request.env['omniauth.error']
request.env
request
c
request["omniauth.error.type"]
request["omniauth.error"]
c
message_key = env['omniauth.error.type']
message_key = env['omniauth.error.strategy']
c
message_key.callback_url
message_key.public_methods
message_key
message_key = env['omniauth.error.strategy']
message_key = env['omniauth.error.stategy']
message_key = env
message_key = env['omniauth']
message_key = env['omniauth.error']
message_key = env['omniauth.error.type']
c
message_key = env['omniauth.error.type']
env["omniauth"]
env
c
request.env["omniauth.auth"]
request.env
request
c
post
c
@post
result.instance_variables
result.instane_variables
result.try
result.encoding
result.result
result.public_methods
erb
erb :erb_str
result.result(locals: {@post => @post})
result.result(locals: {@post => @post}
result.result(locals: {@post => @post}}
result.result(locals: {@post: @post}}
result.result(locals: {@post : @post}}
result.run
result.class
result.public_methods
result.public
result
c
@name
c
erb_str
erb_Str
c
html_file
erb_file
@post
c
@post
c
erb_file
@post
c
@post
c
@post
c
@post.status
n
c
@post.public_methods
c
params["post"]
c
"Poll".delete(' ').underscore
params["post"]["type"].delete(' ').underscore
params["post"]["type"].delete(' ').underscoe
params["post"]["type"].delete(' ')
params["post"]["type"].join('')
params["post"]["type"].join()
params["post"]["type"].underscore
params["post"]["type"].snake_case
params["post"]["type"]
params["post"]
params
pramas
c
@post.status
c
@post.status
c
@post = Post.new
@post.stats
@post
params["post"]["scheduled"]=="on"
params["post"]["scheduled"]
params["post"]
c
@post.start_time.zone
@post.start_time
Time.now.
Time.now.zone.class
Time.now.zone.public_methods
Time.now.zone
Time.now.zone.local
Time.now.zone(0)
Time.now(0)
@post.start_time
Time.now
Time.zone.local(0)
Time.zone.local
Time.zone.loacl
