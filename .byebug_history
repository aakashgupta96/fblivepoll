c
request.env["omniauth.auth"].info.email
request.env["omniauth.auth"].info
request.env["omniauth.auth"].email
request.env["omniauth.auth"]
c
headless.displayexit
%x[ps -p #{process_id}]
headless.display
headless.public_methods
headless
c
params
c
request.env["omniauth.error.type"]
request.env["omniauth.error"]
request.env["omniauth.error"].backtrace
request.env["omniauth.error"].cause
request.env["omniauth.error"].code
request.env["omniauth.error"].message
request.env["omniauth.error"].public_methods
request.env["omniauth.error"]
request.env["omniauth"]
request.env["omniauth.auth"]
params["code"]
params
c
request.env['omniauth.error'].class
request.env['omniauth.error']
request.env
request
c
request["omniauth.error.type"]
request["omniauth.error"]
c
message_key = env['omniauth.error.type']
message_key = env['omniauth.error.strategy']
c
message_key.callback_url
message_key.public_methods
message_key
message_key = env['omniauth.error.strategy']
message_key = env['omniauth.error.stategy']
message_key = env
message_key = env['omniauth']
message_key = env['omniauth.error']
message_key = env['omniauth.error.type']
c
message_key = env['omniauth.error.type']
env["omniauth"]
env
c
request.env["omniauth.auth"]
request.env
request
c
post
c
@post
result.instance_variables
result.instane_variables
result.try
result.encoding
result.result
result.public_methods
erb
erb :erb_str
result.result(locals: {@post => @post})
result.result(locals: {@post => @post}
result.result(locals: {@post => @post}}
result.result(locals: {@post: @post}}
result.result(locals: {@post : @post}}
result.run
result.class
result.public_methods
result.public
result
c
@name
c
erb_str
erb_Str
c
html_file
erb_file
@post
c
@post
c
erb_file
@post
c
@post
c
@post
c
@post.status
n
c
@post.public_methods
c
params["post"]
c
"Poll".delete(' ').underscore
params["post"]["type"].delete(' ').underscore
params["post"]["type"].delete(' ').underscoe
params["post"]["type"].delete(' ')
params["post"]["type"].join('')
params["post"]["type"].join()
params["post"]["type"].underscore
params["post"]["type"].snake_case
params["post"]["type"]
params["post"]
params
pramas
c
@post.status
c
@post.status
c
@post = Post.new
@post.stats
@post
params["post"]["scheduled"]=="on"
params["post"]["scheduled"]
params["post"]
c
@post.start_time.zone
@post.start_time
Time.now.
Time.now.zone.class
Time.now.zone.public_methods
Time.now.zone
Time.now.zone.local
Time.now.zone(0)
Time.now(0)
@post.start_time
Time.now
Time.zone.local(0)
Time.zone.local
Time.zone.loacl
Time.zone
Zone.local
Time.now
@post.start_time
@post
n
post_params
n
params["post"]["start_time(3i)"]
params["start_time(3i)"]
params["start_time"]
params[:start_time]
params
c
@posts.order(created_at: :desc)
@posts.order(:created_at DESC)
@posts.order(:created_at)
@posts.order
@posts.public_methods
c
self.key
self.reload
self.reload!
key
save!
key = "x"
key = x
key
caption
page_id
self.user.token
self.user
current_user
c
Resque.workers.find_all{ |worker| worker.queues[0]=="start_stream" and worker.job["payload"]["args"].first==id }.each do |worker| puts worker end
Resque.workers.find_all{ |worker| worker.queues[0]=="start_stream" and wokrer.job["payload"]["args"].first==id }.each do |worker| puts worker end
Resque.wokrers.find_all{ |worker| worker.queues[0]=="start_stream" and wokrer.job["payload"]["args"].first==id }.each do |worker| puts worker end
Resque.wokrers.find_all{ |worker| worker.queues[0]=="start_stream" and wokrer.job["payload"]["args"].first==id }
Resque.wokrers.find_all{ |worker| worker.queues[0]=="start_stream" and wokrer.job["payload"]["args"].first==id |
c
nc
nn
n
c
Resque.workers
c
resource.class == Admin
resource.class
resource
resouce
c
admin_session
current_admin
current_Admin
admin_signed_in?
sign_in_user
sign_in_admin
Admin.first.sign_in
Admin.first.sing_in
Admin.first
user_signed_in?
c
ret
c
ret
c
publish_pages
manage_pages
c
ret
c
auth
request.env
ret = HTTParty.get("https://graph.facebook.com/#{self.uid}/permissions?access_token=#{self.token}")
ret
ret = HTTParty.get("https://graph.facebook.com/#{self.uid}/permissions?access_token=#{self.token}").parsed_response['data']
ret
c
manage_pages
publish_pages
c
ret[1]["status"]
ret[1]["permission"]
ret[2]["permission"]
ret[0]["permission"]
ret[0].permission
ret[0].permissions
manage_pages
publish_pages
publish_pages =  manage_pages = false
manage_pages
publish_pages
publish_pages, manage_pages = false
ret.each do |key| puts key end
ret.each do |key|
ret
c
@user.class
@user = User.find(1)
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data']
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'].pluck("permissions")
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'].pluck("permissions"]
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'][0]['email']
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'][0].has_key?('status')
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'][0].has_key?('email')
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'][0].has_key('email')
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'][0]
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data']
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'].all
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'].include?('permissions')
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'].include?('email')
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'].include?('publish_pages')
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'].include?('piblish_pages')
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'][0]
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data']
