c
@post.status
n
c
@post.public_methods
c
params["post"]
c
"Poll".delete(' ').underscore
params["post"]["type"].delete(' ').underscore
params["post"]["type"].delete(' ').underscoe
params["post"]["type"].delete(' ')
params["post"]["type"].join('')
params["post"]["type"].join()
params["post"]["type"].underscore
params["post"]["type"].snake_case
params["post"]["type"]
params["post"]
params
pramas
c
@post.status
c
@post.status
c
@post = Post.new
@post.stats
@post
params["post"]["scheduled"]=="on"
params["post"]["scheduled"]
params["post"]
c
@post.start_time.zone
@post.start_time
Time.now.
Time.now.zone.class
Time.now.zone.public_methods
Time.now.zone
Time.now.zone.local
Time.now.zone(0)
Time.now(0)
@post.start_time
Time.now
Time.zone.local(0)
Time.zone.local
Time.zone.loacl
Time.zone
Zone.local
Time.now
@post.start_time
@post
n
post_params
n
params["post"]["start_time(3i)"]
params["start_time(3i)"]
params["start_time"]
params[:start_time]
params
c
@posts.order(created_at: :desc)
@posts.order(:created_at DESC)
@posts.order(:created_at)
@posts.order
@posts.public_methods
c
self.key
self.reload
self.reload!
key
save!
key = "x"
key = x
key
caption
page_id
self.user.token
self.user
current_user
c
Resque.workers.find_all{ |worker| worker.queues[0]=="start_stream" and worker.job["payload"]["args"].first==id }.each do |worker| puts worker end
Resque.workers.find_all{ |worker| worker.queues[0]=="start_stream" and wokrer.job["payload"]["args"].first==id }.each do |worker| puts worker end
Resque.wokrers.find_all{ |worker| worker.queues[0]=="start_stream" and wokrer.job["payload"]["args"].first==id }.each do |worker| puts worker end
Resque.wokrers.find_all{ |worker| worker.queues[0]=="start_stream" and wokrer.job["payload"]["args"].first==id }
Resque.wokrers.find_all{ |worker| worker.queues[0]=="start_stream" and wokrer.job["payload"]["args"].first==id |
c
nc
nn
n
c
Resque.workers
c
resource.class == Admin
resource.class
resource
resouce
c
admin_session
current_admin
current_Admin
admin_signed_in?
sign_in_user
sign_in_admin
Admin.first.sign_in
Admin.first.sing_in
Admin.first
user_signed_in?
c
ret
c
ret
c
publish_pages
manage_pages
c
ret
c
auth
request.env
ret = HTTParty.get("https://graph.facebook.com/#{self.uid}/permissions?access_token=#{self.token}")
ret
ret = HTTParty.get("https://graph.facebook.com/#{self.uid}/permissions?access_token=#{self.token}").parsed_response['data']
ret
c
manage_pages
publish_pages
c
ret[1]["status"]
ret[1]["permission"]
ret[2]["permission"]
ret[0]["permission"]
ret[0].permission
ret[0].permissions
manage_pages
publish_pages
publish_pages =  manage_pages = false
manage_pages
publish_pages
publish_pages, manage_pages = false
ret.each do |key| puts key end
ret.each do |key|
ret
c
@user.class
@user = User.find(1)
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data']
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'].pluck("permissions")
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'].pluck("permissions"]
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'][0]['email']
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'][0].has_key?('status')
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'][0].has_key?('email')
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'][0].has_key('email')
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'][0]
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data']
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'].all
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'].include?('permissions')
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'].include?('email')
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'].include?('publish_pages')
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'].include?('piblish_pages')
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data'][0]
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}").parsed_response['data']
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}")["data"]["permissions"]
HTTParty.get("https://graph.facebook.com/#{@user.uid}/permissions?access_token=#{@user.token}")
HTTParty.get("https://graph.facebook.com/@user.uid/permissions?access_token=#{@user.token}")
HTTParty.get("https://graph.facebook.com")
HTTParty
c
load
reload
reload!
require 'httparty'
require('httparty')
require('HTTParty')
result = HTTParty.get('/')
result = HTTParty.get(/')
User.first.token
User.first.uid
User.first
request.env.to_s.split("grant")[1]
request.env.to_s.split("grant")[0]
request.env.to_s.split("grant")
request.env.to_s.public_methods
request.env.to_s
request.env.to_s.first("grant")
request.env.to_s.public_methods
pp request.env.to_s.find("grant")
pp request.env.to_s
pp request.env
pp request.env.public_methods
require 'pp'
pp request.env.public_methods
request.env.public_methods
request.env.display
request.env.public_methods
request.env.public_methods?
request.env.pretty_print
request.env["omniauth"]
request.env["omniauth.permissions"]
request.env
request.env["omniauth.auth"]
request.env["aumniauth.auth"]
request.env("aumniauth.auth")
request
c
request.env["omniauth.auth"].info.name
request.env["omniauth.auth"].info
request.env["omniauth.auth"]["extra"]["raw_info"].name
request.env["omniauth.auth"]["extra"]["raw_info"]
request.env["omniauth.auth"]["extra"].name
request.env["omniauth.auth"]["extra"]["name"]
request.env["omniauth.auth"]["extra"]
request.env["omniauth.auth"]
c
@embed_link.split("\"")[1]
@embed_link.split("\"")
@embed_link.split("src")[1].split("\"")
@embed_link.split("src")[1].split("\")
@embed_link.split("src")[1]
@embed_link.split("src").[1]
@embed_link.split("src")
c
@embed_link.to_s
@embed_link
c
@embed_link
@embed_link[-1] = "<"
@embed_link
@embed_link[0] = ""
@embed_link[0] = nil
@embed_link.[0] = nil
@embed_link
c
Rails.env
RailsEnv
ENV
c
params
c
params.require(:post)
c
params.require(:post)
params
c
cc
c
result.last.to_blob
result.last
result.size
result.to_blob
result.class
c
n
f.class
f
c
"#{request.env["omniauth.auth"].uid}@#{request.env["omniauth.auth"].provider}.com"
